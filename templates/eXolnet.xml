<templateSet group="eXolnet">
  <template name="gs" value="public function get$NAME$()&#10;{&#10;&#9;return $this-&gt;$VARIABLE$;&#10;}&#10;&#10;public function set$NAME$($$$VARIABLE$)&#10;{&#10;&#9;$this-&gt;$VARIABLE$ = $$$VARIABLE$;&#10;&#10;&#9;return $this;&#10;}" description="Getter/Setter" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="&quot;Something&quot;" alwaysStopAt="true" />
    <variable name="VARIABLE" expression="decapitalize(NAME)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="tp" value="/**&#10; * @dataProvider provideTest$NAME$&#10; */&#10;public function test$NAME$($ARGUMENTS$)&#10;{&#10;&#9;$END$&#10;}&#10;&#10;public function provideTest$NAME$()&#10;{&#10;&#9;return [&#10;&#9;&#9;$PROVIDER$&#10;&#9;];&#10;}" description="phpUnit test with a provider" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ARGUMENTS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PROVIDER" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="tgs" value="public function testGet$NAME$Default()&#10;{&#10;&#9;$this-&gt;spec-&gt;get$NAME$()-&gt;shouldReturn($DEFAULT$);&#10;}&#10;&#10;public function test$NAME$IsMutable()&#10;{&#10;&#9;$expected = $EXPECTED$;&#10;&#10;&#9;$this-&gt;spec-&gt;set$NAME$($expected);&#10;&#9;$this-&gt;spec-&gt;get$NAME$()-&gt;shouldReturn($expected);&#10;}" description="Test unit - Getter and setter" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="&quot;Something&quot;" alwaysStopAt="true" />
    <variable name="DEFAULT" expression="" defaultValue="&quot;null&quot;" alwaysStopAt="true" />
    <variable name="EXPECTED" expression="" defaultValue="&quot;'foo'&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="tuf" value="public function test$NAME$IsFluent()&#10;{&#10;&#9;$this-&gt;spec-&gt;$METHOD$($VALUE$)-&gt;shouldReturn($this-&gt;spec);&#10;}" description="Test unit - Fluent interface" toReformat="false" toShortenFQNames="true">
    <variable name="METHOD" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="&quot;'foo'&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalize(METHOD)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="tum" value="&lt;?php namespace unit;&#10;&#10;use Ditto\Ditto as d;&#10;use Mockery as m;&#10;use $MODEL_NAME$;&#10;&#10;class $MODEL_NAME$Test extends \TestCase {&#10;&#9;/**&#10;&#9; * @var \$MODEL_NAME$&#10;&#9; */&#10;&#9;protected $model;&#10;&#10;&#9;/**&#10;&#9; * @var \Ditto\Ditto&#10;&#9; */&#10;&#9;protected $spec;&#10;&#10;&#9;public function setUp()&#10;&#9;{&#10;&#9;&#9;parent::setUp();&#10;&#10;&#9;&#9;$this-&gt;model = new $MODEL_NAME$();&#10;&#9;&#9;$this-&gt;spec  = d::make($this-&gt;model);&#10;&#9;}&#10;&#10;&#9;//==========================================================================&#10;&#9;// Initialisation&#10;&#9;//==========================================================================&#10;&#10;&#9;public function testItIsInitializable()&#10;&#9;{&#10;&#9;&#9;$this-&gt;spec-&gt;shouldHaveType('$MODEL_NAME$');&#10;&#9;}&#10;}&#10;" description="Test a model unitary" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
      <option name="HTML" value="true" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="tumr" value="public function test$NAME$Relation()&#10;{&#10;&#9;$this-&gt;spec-&gt;$RELATION$()-&gt;shouldHaveType('Illuminate\Database\Eloquent\Relations\$INSTANCE_OF$');&#10;}" description="Test unit - Model relation" toReformat="false" toShortenFQNames="true">
    <variable name="RELATION" expression="" defaultValue="&quot;relation&quot;" alwaysStopAt="true" />
    <variable name="INSTANCE_OF" expression="" defaultValue="&quot;BelongsTo&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalize(RELATION)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="csep" value="//==========================================================================&#10;// $NAME$&#10;//==========================================================================" description="Class comment separator" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="CSS_PROPERTY_VALUE" value="true" />
      <option name="CSS_DECLARATION_BLOCK" value="true" />
      <option name="CSS_RULESET_LIST" value="true" />
      <option name="CSS" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="__" value="{{ __('$VARIABLE$') }}" description="Laravel Translation" toReformat="false" toShortenFQNames="true">
    <variable name="VARIABLE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
      <option name="HTML" value="true" />
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="todo" value="// TODO-AD: $COMMENT$ &lt;adeschambeault@exolnet.com&gt;" description="TODO" toReformat="false" toShortenFQNames="true">
    <variable name="COMMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="CSS_PROPERTY_VALUE" value="true" />
      <option name="CSS_DECLARATION_BLOCK" value="true" />
      <option name="CSS_RULESET_LIST" value="true" />
      <option name="CSS" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="CoffeeScript" value="true" />
      <option name="PHP" value="true" />
      <option name="HAML" value="true" />
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="blt" value="&lt;?php&#10;&#10;return [&#10;&#9;'$VARIABLE$' =&gt; $VALUE$,&#10;];&#10;" description="Base language template" toReformat="true" toShortenFQNames="true">
    <variable name="VARIABLE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="''" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="g" value="public function get$NAME$()&#10;{&#10;&#9;return $this-&gt;$VARIABLE$;&#10;}" description="Getter" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="&quot;Something&quot;" alwaysStopAt="true" />
    <variable name="VARIABLE" expression="decapitalize(NAME)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="s" value="public function set$NAME$($$$VARIABLE$)&#10;{&#10;&#9;$this-&gt;$VARIABLE$ = $$$VARIABLE$;&#10;&#10;&#9;return $this;&#10;}" description="Setter" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="&quot;Something&quot;" alwaysStopAt="true" />
    <variable name="VARIABLE" expression="decapitalize(NAME)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="tfok" value="public function test$NAME$$ACTION_NAME$()&#10;{&#10;&#9;$this-&gt;$ACTION$('$ROUTE$'$END$);&#10;&#10;&#9;$this-&gt;assertResponseOk();&#10;}" description="Test functionnal - Response Ok" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="&quot;Index&quot;" alwaysStopAt="true" />
    <variable name="ACTION" expression="enum(&quot;get&quot;, &quot;post&quot;, &quot;put&quot;, &quot;patch&quot;, &quot;delete&quot;, &quot;head&quot;)" defaultValue="&quot;get&quot;" alwaysStopAt="true" />
    <variable name="ROUTE" expression="" defaultValue="&quot;home&quot;" alwaysStopAt="true" />
    <variable name="ACTION_NAME" expression="capitalize(ACTION)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="tfre" value="public function test$NAME$RouteExists()&#10;{&#10;&#9;$this-&gt;assertRouteExists('$METHOD$', '$PATH$');&#10;&#9;$this-&gt;assertRouteMatchesAction('$METHOD$', '$PATH$', '$CONTROLLER$@$ACTION$');&#10;}" description="Test functionnal - Route exists" toReformat="false" toShortenFQNames="true">
    <variable name="METHOD" expression="enum(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;PATCH&quot;, &quot;DELETE&quot;, &quot;HEAD&quot;)" defaultValue="&quot;GET&quot;" alwaysStopAt="true" />
    <variable name="PATH" expression="" defaultValue="&quot;home&quot;" alwaysStopAt="true" />
    <variable name="CONTROLLER" expression="" defaultValue="&quot;NameController&quot;" alwaysStopAt="true" />
    <variable name="ACTION" expression="" defaultValue="&quot;index&quot;" alwaysStopAt="true" />
    <variable name="NAME" expression="capitalize(ACTION)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="tfm" value="public function test$NAME$$ACTION_NAME$Missing()&#10;{&#10;&#9;$this-&gt;expectResponseMissing();&#10;&#10;&#9;$this-&gt;$ACTION$('$ROUTE$');&#10;}" description="Test functionnal - Missing" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="&quot;Show&quot;" alwaysStopAt="true" />
    <variable name="ACTION" expression="enum(&quot;get&quot;, &quot;post&quot;, &quot;put&quot;, &quot;patch&quot;, &quot;delete&quot;, &quot;head&quot;)" defaultValue="&quot;get&quot;" alwaysStopAt="true" />
    <variable name="ROUTE" expression="" defaultValue="&quot;show/0&quot;" alwaysStopAt="true" />
    <variable name="ACTION_NAME" expression="capitalize(ACTION)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="tfb" value="&lt;?php namespace functional$NAMESPACE$;&#10;&#10;class $NAME$Test extends \TestCaseFunctional&#10;{&#10;&#9;$END$&#10;}&#10;" description="Test functionnal - Base template" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAMESPACE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
      <option name="HTML" value="true" />
      <option name="PHP" value="true" />
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="tfcrud" value="//==========================================================================&#10;// Index&#10;//==========================================================================&#10;&#10;public function testIndexRouteExists()&#10;{&#10;&#9;$this-&gt;assertRouteExists('GET', '$ROUTE$');&#10;&#9;$this-&gt;assertRouteMatchesAction('GET', '$ROUTE$', '$CONTROLLER$@index');&#10;}&#10;&#10;public function testIndexGet()&#10;{&#10;&#9;$$this$AUTH$-&gt;get('$ROUTE$');&#10;&#10;&#9;$this-&gt;assertResponseOk();&#10;}&#10;&#10;//==========================================================================&#10;// Create&#10;//==========================================================================&#10;&#10;public function testCreateRouteExists()&#10;{&#10;&#9;$this-&gt;assertRouteExists('GET', '$ROUTE$/create');&#10;&#9;$this-&gt;assertRouteMatchesAction('GET', '$ROUTE$/create', '$CONTROLLER$@create');&#10;}&#10;&#10;public function testCreateGet()&#10;{&#10;&#9;$$this$AUTH$-&gt;get('$ROUTE$/create');&#10;&#10;&#9;$this-&gt;assertResponseOk();&#10;}&#10;&#10;//==========================================================================&#10;// Store&#10;//==========================================================================&#10;&#10;public function testStoreRouteExists()&#10;{&#10;&#9;$this-&gt;assertRouteExists('POST', '$ROUTE$');&#10;&#9;$this-&gt;assertRouteMatchesAction('POST', '$ROUTE$', '$CONTROLLER$@store');&#10;}&#10;&#10;public function testStorePost()&#10;{&#10;&#9;$$this$AUTH$-&gt;post('$ROUTE$', [&#10;&#9;&#9;$VALID_DATA$&#10;&#9;]);&#10;&#10;&#9;$this-&gt;assertRedirectedTo('$ROUTE$');&#10;&#9;$this-&gt;assertNotice('success');&#10;}&#10;&#10;public function testStoreEmptyPost()&#10;{&#10;&#9;$$this$AUTH$-&gt;post('$ROUTE$');&#10;&#10;&#9;$this-&gt;assertRedirectedTo('$ROUTE$/create');&#10;&#9;$this-&gt;assertNotice('error');&#10;}&#10;&#10;//==========================================================================&#10;// Show&#10;//==========================================================================&#10;&#10;public function testShowRouteExists()&#10;{&#10;&#9;$this-&gt;assertRouteExists('GET', '$ROUTE$/$ID$');&#10;&#9;$this-&gt;assertRouteMatchesAction('GET', '$ROUTE$/$ID$', '$CONTROLLER$@show');&#10;}&#10;&#10;public function testShowGet()&#10;{&#10;&#9;$$this$AUTH$-&gt;get('$ROUTE$/$ID$');&#10;&#10;&#9;$this-&gt;assertResponseOk();&#10;}&#10;&#10;public function testShowMissingGet()&#10;{&#10;&#9;$this-&gt;expectResponseMissing();&#10;&#10;&#9;$$this$AUTH$-&gt;get('$ROUTE$/$ID_MISSING$');&#10;}&#10;&#10;//==========================================================================&#10;// Edit&#10;//==========================================================================&#10;&#10;public function testEditRouteExists()&#10;{&#10;&#9;$this-&gt;assertRouteExists('GET', '$ROUTE$/$ID$/edit');&#10;&#9;$this-&gt;assertRouteMatchesAction('GET', '$ROUTE$/$ID$/edit', '$CONTROLLER$@edit');&#10;}&#10;&#10;public function testEditGet()&#10;{&#10;&#9;$$this$AUTH$-&gt;get('$ROUTE$/$ID$/edit');&#10;&#10;&#9;$this-&gt;assertResponseOk();&#10;}&#10;&#10;public function testEditMissingGet()&#10;{&#10;&#9;$this-&gt;expectResponseMissing();&#10;&#10;&#9;$this-&gt;get('$ROUTE$/$ID_MISSING$/edit');&#10;}&#10;&#10;//==========================================================================&#10;// Update&#10;//==========================================================================&#10;&#10;public function testUpdateRouteExists()&#10;{&#10;&#9;$this-&gt;assertRouteExists('PUT', '$ROUTE$/$ID$');&#10;&#9;$this-&gt;assertRouteMatchesAction('PUT', '$ROUTE$/$ID$', '$CONTROLLER$@update');&#10;}&#10;&#10;public function testUpdateMissingPost()&#10;{&#10;&#9;$this-&gt;expectResponseMissing();&#10;&#10;&#9;$$this$AUTH$-&gt;put('$ROUTE$/0');&#10;}&#10;&#10;public function testUpdatePost()&#10;{&#10;&#9;$$this$AUTH$-&gt;put('$ROUTE$/$ID$', [&#10;&#9;&#9;$VALID_DATA$&#10;&#9;]);&#10;&#10;&#9;$this-&gt;assertRedirectedTo('$ROUTE$');&#10;&#9;$this-&gt;assertNotice('success');&#10;}&#10;&#10;public function testUpdateEmptyPost()&#10;{&#10;&#9;$$this$AUTH$-&gt;put('$ROUTE$/$ID$');&#10;&#10;&#9;$this-&gt;assertRedirectedTo('$ROUTE$/$ID$/edit');&#10;&#9;$this-&gt;assertNotice('error');&#10;}&#10;&#10;public function testUpdateInvalidPost()&#10;{&#10;&#9;$$this$AUTH$-&gt;put('$ROUTE$/$ID$', [&#10;&#9;&#9;$INVALID_DATA$&#10;&#9;]);&#10;&#10;&#9;$this-&gt;assertRedirectedTo('$ROUTE$/$ID$/edit');&#10;&#9;$this-&gt;assertNotice('error');&#10;}&#10;&#10;//==========================================================================&#10;// Destroy&#10;//==========================================================================&#10;&#10;public function testDestroyRouteExists()&#10;{&#10;&#9;$this-&gt;assertRouteExists('DELETE', '$ROUTE$/$ID$');&#10;&#9;$this-&gt;assertRouteMatchesAction('DELETE', '$ROUTE$/$ID$', '$CONTROLLER$@destroy');&#10;}&#10;&#10;public function testDestroyGet()&#10;{&#10;&#9;$$this$AUTH$-&gt;delete('$ROUTE$/$ID$');&#10;&#10;&#9;$this-&gt;assertRedirectedTo('$ROUTE$');&#10;&#9;$this-&gt;assertNotice('success');&#10;}&#10;&#10;public function testDestroyMissingGet()&#10;{&#10;&#9;$this-&gt;expectResponseMissing();&#10;&#10;&#9;$$this$AUTH$-&gt;delete('$ROUTE$/$ID_MISSING$');&#10;}" description="Test function - CRUD testing" toReformat="false" toShortenFQNames="true">
    <variable name="ROUTE" expression="" defaultValue="&quot;home&quot;" alwaysStopAt="true" />
    <variable name="CONTROLLER" expression="" defaultValue="&quot;HomeController&quot;" alwaysStopAt="true" />
    <variable name="AUTH" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ID" expression="" defaultValue="&quot;1&quot;" alwaysStopAt="true" />
    <variable name="ID_MISSING" expression="" defaultValue="&quot;0&quot;" alwaysStopAt="true" />
    <variable name="VALID_DATA" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="INVALID_DATA" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="c" value="public function __construct($ARGUMENTS$)&#10;{&#10;&#9;$END$&#10;}" description="PHP constructor" toReformat="false" toShortenFQNames="true">
    <variable name="ARGUMENTS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="cf" value="/**&#10; * Copyright © $YEAR$ eXolnet Inc. All rights reserved. (http://www.exolnet.com)&#10; *&#10; * This file contains copyrighted code that is the sole property of eXolnet Inc.&#10; * You may not use this file except with a written agreement.&#10; *&#10; * This code is distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND,&#10; * EITHER EXPRESS OR IMPLIED, AND EXOLNET INC. HEREBY DISCLAIMS ALL SUCH&#10; * WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,&#10; * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.&#10; *&#10; * @package    $PACKAGE$&#10; * @subpackage $SUBPACKAGE$&#10; * @author     eXolnet Inc. &lt;info@exolnet.com&gt;&#10; */" description="eXolnet's file copyright" toReformat="false" toShortenFQNames="true">
    <variable name="PACKAGE" expression="" defaultValue="&quot;Package&quot;" alwaysStopAt="true" />
    <variable name="SUBPACKAGE" expression="" defaultValue="&quot;Subpackage&quot;" alwaysStopAt="true" />
    <variable name="YEAR" expression="" defaultValue="&quot;2014&quot;" alwaysStopAt="false" />
    <context>
      <option name="CSS_PROPERTY_VALUE" value="true" />
      <option name="CSS_DECLARATION_BLOCK" value="true" />
      <option name="CSS_RULESET_LIST" value="true" />
      <option name="CSS" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
      <option name="CoffeeScript" value="true" />
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="tugso" value="public function testGet$NAME$Default()&#10;{&#10;&#9;$this-&gt;spec-&gt;get$NAME$()-&gt;shouldReturn($DEFAULT$);&#10;}&#10;&#10;public function test$NAME$IsMutable()&#10;{&#10;&#9;$expected = m::mock('$OBJECT$');&#10;&#9;$expected-&gt;shouldReceive('getAttribute')-&gt;with('id')-&gt;andReturn(1);&#10;&#10;&#9;$this-&gt;spec-&gt;set$NAME$($expected);&#10;&#9;$this-&gt;spec-&gt;get$NAME$()-&gt;shouldReturn($expected);&#10;}&#10;&#10;public function testSet$NAME$IsFluent()&#10;{&#10;&#9;$value = m::mock('$OBJECT$');&#10;&#9;$value-&gt;shouldReceive('getAttribute')-&gt;with('id')-&gt;andReturn(1);&#10;&#10;&#9;$this-&gt;spec-&gt;set$NAME$($value)-&gt;shouldReturn($this-&gt;spec);&#10;}" description="Test unit - Getter and setter object" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="&quot;Something&quot;" alwaysStopAt="true" />
    <variable name="DEFAULT" expression="" defaultValue="&quot;null&quot;" alwaysStopAt="true" />
    <variable name="OBJECT" expression="" defaultValue="&quot;Object&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="tugs" value="public function testGet$NAME$Default()&#10;{&#10;&#9;$this-&gt;spec-&gt;get$NAME$()-&gt;shouldReturn($DEFAULT$);&#10;}&#10;&#10;public function test$NAME$IsMutable()&#10;{&#10;&#9;$expected = $EXPECTED$;&#10;&#10;&#9;$this-&gt;spec-&gt;set$NAME$($expected);&#10;&#9;$this-&gt;spec-&gt;get$NAME$()-&gt;shouldReturn($expected);&#10;}&#10;&#10;public function testSet$NAME$IsFluent()&#10;{&#10;&#9;$this-&gt;spec-&gt;set$NAME$($EXPECTED$)-&gt;shouldReturn($this-&gt;spec);&#10;}" description="Test unit - Getter and setter" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="&quot;Something&quot;" alwaysStopAt="true" />
    <variable name="DEFAULT" expression="" defaultValue="&quot;null&quot;" alwaysStopAt="true" />
    <variable name="EXPECTED" expression="" defaultValue="&quot;'foo'&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="@deprecated" value="@deprecated Will be removed in v$VERSION$. Use @{link $ALIAS$()} instead." description="phpDoc deprecated tag" toReformat="false" toShortenFQNames="true">
    <variable name="VERSION" expression="" defaultValue="&quot;X.Y.Z&quot;" alwaysStopAt="true" />
    <variable name="ALIAS" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP Comment" value="true" />
    </context>
  </template>
  <template name="calias" value="Alias of @{link $ALIAS$()}." description="phpDoc alias comment description." toReformat="false" toShortenFQNames="true">
    <variable name="ALIAS" expression="" defaultValue="&quot;method&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP Comment" value="true" />
    </context>
  </template>
</templateSet>